version: '3.8'

services:
  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: shopee-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopee-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: shopee-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - shopee-network

  # MongoDB (if you want to use local MongoDB for development)
  mongodb:
    image: mongo:7.0
    container_name: shopee-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: shopee
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopee-network

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: shopee-product-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/shopee_products?authSource=admin
      KAFKA_BROKERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./product-service:/app
      - /app/node_modules
    networks:
      - shopee-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: shopee-order-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/shopee_orders?authSource=admin
      KAFKA_BROKERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./order-service:/app
      - /app/node_modules
    networks:
      - shopee-network
    restart: unless-stopped

  # Delivery Service
  delivery-service:
    build:
      context: ./delivery-service
      dockerfile: Dockerfile
    container_name: shopee-delivery-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/shopee_deliveries?authSource=admin
      KAFKA_BROKERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./delivery-service:/app
      - /app/node_modules
    networks:
      - shopee-network
    restart: unless-stopped

  # Kafka UI (optional - for monitoring Kafka)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: shopee-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: shopee-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - shopee-network
    restart: unless-stopped

  # MongoDB Express (optional - for MongoDB management)
  mongo-express:
    image: mongo-express:latest
    container_name: shopee-mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - shopee-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local

networks:
  shopee-network:
    driver: bridge
